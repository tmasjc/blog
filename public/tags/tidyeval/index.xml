<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>tidyeval on Not So Formal</title>
    <link>/tags/tidyeval/</link>
    <description>Recent content in tidyeval on Not So Formal</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 28 Oct 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/tags/tidyeval/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Programming in dplyr - Row Filtering</title>
      <link>/2018-10-28-programming-in-dplyr-row-filtering/</link>
      <pubDate>Sun, 28 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>/2018-10-28-programming-in-dplyr-row-filtering/</guid>
      <description>How do you program the row filtering dynamically when working with dplyr verb? Say we have a dataframe with 2 columns, x and y.
library(tidyverse) library(rlang) # make some sample set.seed(1234) df &amp;lt;- 2 %&amp;gt;% rerun(rnorm(100, 10, 2) %&amp;gt;% round()) %&amp;gt;% bind_cols() colnames(df) &amp;lt;- c(&amp;quot;x&amp;quot;, &amp;quot;y&amp;quot;) # simple plot p &amp;lt;- df %&amp;gt;% ggplot(aes(x, y)) + geom_point(position = position_jitter(width = 1), alpha = 0.7) + theme_minimal() p Our objective here is to ‘zone’ out the points that fall in the 50th percentile of both x and y.</description>
    </item>
    
    <item>
      <title>Programming in dplyr - Column Manipulation</title>
      <link>/2018-09-07-dynamic-variable-name-in-dplyr/</link>
      <pubDate>Fri, 07 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>/2018-09-07-dynamic-variable-name-in-dplyr/</guid>
      <description>How do you program the column manipulation dynamically when working with dplyr verb? Say, we have a dataframe with multiple columns in pair,
library(tidyverse) # simulate some data df &amp;lt;- rerun(3 * 2, rnorm(10, 5, 2)) %&amp;gt;% bind_cols() # imagine some column names colnames(df) &amp;lt;- map(c(&amp;quot;weight&amp;quot;, &amp;quot;height&amp;quot;, &amp;quot;length&amp;quot;), paste0, c(&amp;quot;.x&amp;quot;, &amp;quot;.y&amp;quot;)) %&amp;gt;% unlist() df ## # A tibble: 10 x 6 ## weight.x weight.y height.x height.y length.x length.y ## &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; ## 1 6.</description>
    </item>
    
  </channel>
</rss>