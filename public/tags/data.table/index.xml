<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>data.table on Not So Formal</title>
    <link>https://notsoformal.xyz/tags/data.table/</link>
    <description>Recent content in data.table on Not So Formal</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 24 Mar 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://notsoformal.xyz/tags/data.table/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Rowwise Operation</title>
      <link>https://notsoformal.xyz/2019-03-24-rowwise-operation/</link>
      <pubDate>Sun, 24 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://notsoformal.xyz/2019-03-24-rowwise-operation/</guid>
      <description>Compare multiple methods to get row-wise operation done on a data frame.
In this case, we wish to extract the corresponding highest value column.
library(tidyverse) set.seed(1212) # a dummy data frame dummy_df &amp;lt;- matrix(runif(15, min = 1, max = 9), ncol = 3) %&amp;gt;% as_data_frame() ## Warning: `as_data_frame()` is deprecated, use `as_tibble()` (but mind the new semantics). ## This warning is displayed once per session. colnames(dummy_df) &amp;lt;- c(&amp;quot;x&amp;quot;, &amp;quot;y&amp;quot;, &amp;quot;z&amp;quot;) Method 1: dplyr::rowwise use_rowwise &amp;lt;- function(df) { df %&amp;gt;% rowwise() %&amp;gt;% mutate(max = names(df)[which.</description>
    </item>
    
    <item>
      <title>Data.Table</title>
      <link>https://notsoformal.xyz/2018-02-09-data-frame-tip/</link>
      <pubDate>Fri, 09 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>https://notsoformal.xyz/2018-02-09-data-frame-tip/</guid>
      <description>A quick walkthrough on using data.table in performing long-to-wide operation on data frame. Significant improvement on speed.
library(dplyr) library(tidyr) library(data.table) # set options(DT.options = list(pageLength = 5, dom = &amp;#39;tip&amp;#39;)) set.seed(123) rand &amp;lt;- runif(1e7, min = 1, max = length(LETTERS)) %&amp;gt;% round() # Make some dummy data df &amp;lt;- data.frame( letters = LETTERS[rand] %&amp;gt;% sample(), num = (1:length(LETTERS))[rand] %&amp;gt;% sample() ) # Add count for spreading later df &amp;lt;- df %&amp;gt;% group_by(letters) %&amp;gt;% mutate(count = 1:length(letters)) %&amp;gt;% arrange(letters, count) head(df, 10) ## # A tibble: 10 x 3 ## # Groups: letters [1] ## letters num count ## &amp;lt;fct&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; ## 1 A 20 1 ## 2 A 17 2 ## 3 A 10 3 ## 4 A 1 4 ## 5 A 23 5 ## 6 A 10 6 ## 7 A 5 7 ## 8 A 4 8 ## 9 A 19 9 ## 10 A 6 10 Letâ€™s try out different methods on converting above long data frame to wide format.</description>
    </item>
    
  </channel>
</rss>