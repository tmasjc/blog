<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>gganimate on Not So Formal</title>
    <link>https://notsoformal.xyz/tags/gganimate/</link>
    <description>Recent content in gganimate on Not So Formal</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 19 May 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://notsoformal.xyz/tags/gganimate/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>RFM Model Timelapse</title>
      <link>https://notsoformal.xyz/2019-05-19-rfm-model-timelapse/</link>
      <pubDate>Sun, 19 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://notsoformal.xyz/2019-05-19-rfm-model-timelapse/</guid>
      <description>A simple exercise of plotting RFM (recency, frequency, monetary) model and using gganimate to add a cherry on top.
Dataset: Dr Daqing Chen, Director: Public Analytics group. chend ‘@’ lsbu.ac.uk, School of Engineering, London South Bank University, London SE1 0AA, UK.
httr::GET(&amp;quot;https://query.data.world/s/eibmlnrvn7hzil7adpfqceeity3im6&amp;quot;, write_disk(tf &amp;lt;- tempfile(fileext = &amp;quot;.xlsx&amp;quot;))) ## Response [https://download.data.world/file_download/uci/online-retail/Onlinex?auth=eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJwcm9kLXVzZXItY2xpZW50OnRtYXMtamMiLCJpc3MiOiJhZ2VudDp0bWFzLWpjOjoyZDJkOGFjYy0yMDAwLTQ0NWQtOWVlZS02YTZlNDQ5MzI4MzMiLCJpYXQiOjE1NTc5NzQ0NTksInJvbGUiOlsidXNlciIsInVzZXJfYXBpX2FkbWluIiwidXNlcl9hcGlfcmVhZCIsInVzZXJfYXBpX3dyaXRlIl0sImdlbmVyYWwtcHVycG9zZSI6ZmFsc2UsInVybCI6IjJlZWY3ZTEwMzllNmU5NjRiNTdlZDdhNTJiNzYyNmVkNzM0NjM4M2YifQ.TH1yJ7mMLNo8jDJs_EAiuwEh4JJlQELaMJ_aJVVEKgyYYdiy-h_N56sgGbm1p8y1BIBaI3iFNM7yFwiGLE9Qpg] ## Date: 2020-02-08 13:58 ## Status: 200 ## Content-Type: text/html ## Size: 23.7 MB ## &amp;lt;ON DISK&amp;gt; /var/folders/xj/wctktk112yz7y6skyk6z40jr0000gp/T//RtmpWPTUw0/file7a177c67c6e2.xlsx raw &amp;lt;- read_excel(tf) %&amp;gt;% clean_names() # select important features dat &amp;lt;- raw %&amp;gt;% select(customer_id, invoice_no, invoice_date, unit_price, quantity) %&amp;gt;% mutate(total_paid = unit_price * quantity, invoice_date = lubridate::as_date(invoice_date)) %&amp;gt;% rename(date = invoice_date, invoice = invoice_no) # count in recency, frequency, and monetary d &amp;lt;- max(dat$date) dat &amp;lt;- dat %&amp;gt;% group_by(customer_id) %&amp;gt;% summarise(rec = time_length(interval(d, max(date)), &amp;quot;days&amp;quot;), freq = n_distinct(invoice), monet = sum(total_paid)) %&amp;gt;% mutate(rec = abs(rec), monet = monet / freq) %&amp;gt;% # only keep positive amount filter(monet &amp;gt;= 0) # EDA ------------------------------------------------------------ dat %&amp;gt;% gather(var, val, -customer_id) %&amp;gt;% group_by(var) %&amp;gt;% # remove outliers filter(val &amp;lt;= quantile(val, 0.</description>
    </item>
    
  </channel>
</rss>